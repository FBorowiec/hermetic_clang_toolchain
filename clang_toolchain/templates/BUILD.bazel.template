load(":cc_toolchain_config.bzl", "cc_toolchain_config")

package(default_visibility = ["//visibility:public"])

cc_toolchain_config(
    name = "cc_toolchain_config",
)

cc_toolchain(
    name = "cc_toolchain",
    all_files = ":all_files",
    ar_files = ":ar_files",
    as_files = ":compiler_files",
    compiler_files = ":compiler_files",
    dwp_files = ":empty",
    linker_files = ":linker_files",
    objcopy_files = ":objcopy_files",
    strip_files = ":strip_files",
    supports_param_files = True,
    toolchain_config = ":cc_toolchain_config",
    toolchain_identifier = "hermetic-clang",
)

toolchain(
    name = "toolchain",
    exec_compatible_with = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
    target_compatible_with = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
    toolchain = ":cc_toolchain",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)

filegroup(
    name = "compiler_files",
    srcs = [
        "bin/clang",
        "bin/clang++",
        "clang++_wrapper.sh",
        "clang_wrapper.sh",
    ] + glob([
        "lib/clang/**/*",
        "include/**/*",
        "lib/**/*.so*",
    ]),
)

filegroup(
    name = "linker_files",
    srcs = [
        "bin/clang",
        "bin/clang++",
        "bin/ld.lld",
        "bin/lld",
        "clang_wrapper.sh",
    ] + glob([
        "lib/**/*.so*",
        "lib/**/*.a",
    ]),
)

filegroup(
    name = "ar_files",
    srcs = ["bin/llvm-ar"],
)

filegroup(
    name = "objcopy_files",
    srcs = ["bin/llvm-objcopy"],
)

filegroup(
    name = "strip_files",
    srcs = ["bin/llvm-strip"],
)

filegroup(
    name = "all_files",
    srcs = [
        ":ar_files",
        ":compiler_files",
        ":linker_files",
        ":objcopy_files",
        ":strip_files",
    ],
)

filegroup(
    name = "empty",
    srcs = [],
)
